{"version":3,"sources":["actions/index.ts","selectors/index.ts","components/ChangeExchangeValueField.tsx","components/CurrencyList.tsx","components/Area.tsx","components/ExchangeButton.tsx","components/SwitchButton.tsx","components/ExchangeRate.tsx","components/App.tsx","containers/AppContainer.tsx","serviceWorker.js","reducers/exchange.ts","reducers/index.ts","store/index.ts","index.tsx"],"names":["ActionTypes","getExchangeState","state","exchange","getSellOutExchange","createSelector","s","sellOut","getBuyInExchange","buyIn","getInitBalances","initBalances","getAllCurrencies","allCurrencies","ChangeExchangeValueField","handleChange","e","props","onInputChange","target","value","isSellingOut","this","inputValue","type","onChange","React","Component","CurrencyList","handleOnClick","console","log","onSelectCurrency","selectedCurrencyCode","allCurrenciesCodes","map","item","code","label","selectedCode","classNamePrefix","options","Area","initBalance","currentCurrency","find","currencyCode","className","symbol","ExchangeButton","disabled","onClick","onClickExchange","SwitchButton","onSwitchExchange","ExchangeRate","sellOutCurrency","buyInCurrency","rate","toFixed","App","timer","fetchExchangeRate","clearInterval","sellOutExchange","sellOutInitBalance","buyInExchange","buyInInitBalance","disableExchangeButton","mapDispatchToProps","CHANGE_EXCHANGE_VALUE","payload","CONFIRM_EXCHANGE","SWITCH_EXCHANGE","SELECT_CURRENCY","FETCH_EXCHANGE_RATE","connect","Boolean","window","location","hostname","match","OPEN_EXCHANGE_RATES_APP_ID","initialState","round","exp","Math","isNaN","NaN","valueString","toString","split","reducer","combineReducers","action","exchangeValue","newState","Object","assign","newItem","oldSellOut","oldBuyIn","selectedCurrency","fetch","then","res","json","error","rates","catch","store","createStore","applyMiddleware","logger","ReactDOM","render","AppContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6KAAYA,E,kDAAAA,K,+CAAAA,E,oCAAAA,E,kCAAAA,E,kCAAAA,E,2CAAAA,M,iBCGNC,EAAoB,SAACC,GAAD,OAAkBA,EAAMC,UAErCC,EAAqBC,YAAe,CAACJ,IAAmB,SAAAK,GAAC,OAAIA,EAAEC,WAC/DC,EAAmBH,YAAe,CAACJ,IAAmB,SAAAK,GAAC,OAAIA,EAAEG,SAC7DC,EAAkBL,YAAe,CAACJ,IAAmB,SAAAK,GAAC,OAAIA,EAAEK,gBAC5DC,EAAmBP,YAAe,CAACJ,IAAmB,SAAAK,GAAC,OAAGA,EAAEO,iB,mCCqB1DC,G,iNAhBXC,aAAe,SAACC,GACZ,EAAKC,MAAMC,cAAcF,EAAEG,OAAOC,MAAO,EAAKH,MAAMI,e,wEAG9C,IAAD,SAC0BC,KAAKL,MAA/BI,EADA,EACAA,aACDE,EAFC,EACcpB,SACOiB,MAE1B,OAAQ,6BACHG,EAAa,GAAK,8BAAOF,EAAe,IAAM,KAC/C,2BAAOG,KAAK,OAAOJ,MAAOG,EAAYE,SAAU,SAACT,GAAD,OAAY,EAAKD,aAAaC,W,GAZnDU,IAAMC,Y,QCuB9BC,E,2MAnBXC,cAAgB,SAACb,GACbc,QAAQC,IAAIf,GACZ,EAAKC,MAAMe,iBAAiBhB,EAAEI,MAAO,EAAKH,MAAMI,e,wEAG3C,IAAD,SACwCC,KAAKL,MAA5CJ,EADD,EACCA,cAAeoB,EADhB,EACgBA,qBAChBC,EAAqBrB,EAAcsB,KAAI,SAACC,GAAU,MAAO,CAAChB,MAAOgB,EAAKC,KAAMC,MAAOF,EAAKC,SACxFE,EAAe,CAACnB,MAAOa,EAAsBK,MAAOL,GAExD,OAAO,kBAAC,IAAD,CACHO,gBAAgB,gBAChBpB,MAAOmB,EACPd,SAAU,SAACT,GAAD,OAAW,EAAKa,cAAcb,IACxCyB,QAASP,Q,GAhBMR,IAAMC,WC0BlBe,E,iLArBD,IAAD,EACwFpB,KAAKL,MAA5FJ,EADD,EACCA,cAAe8B,EADhB,EACgBA,YAAYxC,EAD5B,EAC4BA,SAAUkB,EADtC,EACsCA,aAAcH,EADpD,EACoDA,cAAec,EADnE,EACmEA,iBACpEY,EAAkB/B,EAAcgC,MAAK,SAACT,GAAU,OAAOA,EAAKC,OAASlC,EAAS2C,gBAElF,OACI,yBAAKC,UAAW1B,EAAc,qBAAuB,oBACjD,yBAAK0B,UAAU,gBACX,kBAAC,EAAD,CAAclC,cAAeA,EACbmB,iBAAkBA,EAClBC,qBAAsB9B,EAAS2C,aAC/BzB,aAAcA,IAC9B,yBAAK0B,UAAU,iBAAf,YAAyCH,GAAmBA,EAAgBI,OAAQL,EAAYvB,QAEpG,yBAAK2B,UAAU,eACX,kBAAC,EAAD,CAA0B1B,aAAcA,EAAclB,SAAUA,EAAUe,cAAeA,U,GAf1FQ,IAAMC,WCEVsB,E,iLATP,IAAIF,EAAYzB,KAAKL,MAAMiC,SAAU,0CAA4C,iCAEjF,OAAQ,yBAAKH,UAAWA,EAAWI,QAAS7B,KAAKL,MAAMmC,iBAA/C,gB,GALa1B,IAAMC,WCMpB0B,E,iLAJP,OAAQ,yBAAKN,UAAU,gBAAgBI,QAAS7B,KAAKL,MAAMqC,uB,GAHxC5B,IAAMC,WCelB4B,E,iLAXD,IAAD,EACkCjC,KAAKL,MAAvCuC,EADA,EACAA,gBAAiBC,EADjB,EACiBA,cAEtB,OAAQ,yBAAKV,UAAU,iBAClBS,GAAmBC,GAChB,iCAAOD,EAAgBR,OAAvB,OAAmC,EAAEQ,EAAgBE,KAAKD,EAAcC,MAAMC,QAAQ,GAAIF,EAAcT,a,GAP7FtB,IAAMC,WCwElBiC,E,2MArDbC,MAAQ,E,mFAGNvC,KAAKL,MAAM6C,sB,6CAOTC,cAAczC,KAAKuC,OACnBvC,KAAKuC,MAAQ,I,+BAGP,IAAD,EAC2EvC,KAAKL,MAAjFN,EADC,EACDA,aAAcR,EADb,EACaA,SAAUiD,EADvB,EACuBA,gBAAiBE,EADxC,EACwCA,iBAAkBzC,EAD1D,EAC0DA,cAC7DmD,EAAkB7D,EAASI,QAC3B0D,EAAqBtD,EAAakC,MAAK,SAACT,GAAU,OAAOA,EAAKU,eAAiBkB,EAAgBlB,gBAC/FoB,EAAgB/D,EAASM,MACzB0D,EAAmBxD,EAAakC,MAAK,SAACT,GAAU,OAAOA,EAAKU,eAAiBoB,EAAcpB,gBAC3FU,EAAkB3C,EAAcgC,MAAK,SAACT,GAAU,OAAOA,EAAKC,OAAS2B,EAAgBlB,gBACrFW,EAAgB5C,EAAcgC,MAAK,SAACT,GAAU,OAAOA,EAAKC,OAAS6B,EAAcpB,gBACjFsB,GAAwBH,IAAqBA,EAAmB7C,MAAQ4C,EAAgB5C,OAAmC,IAA1B4C,EAAgB5C,OAAe4C,EAAgBlB,eAAiBoB,EAAcpB,cAEnL,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cAAf,YACA,yBAAKA,UAAU,kBACVkB,EAAqB,kBAAC,EAAD,CAAMpD,cAAeA,EACf8B,YAAasB,EACb9D,SAAU6D,EACV9C,cAAeI,KAAKL,MAAMC,cAC1Bc,iBAAkBV,KAAKL,MAAMe,iBAC7BX,cAAc,IACnB,mEACvB,yBAAK0B,UAAU,gBACb,kBAAC,EAAD,CAAcO,iBAAkBA,IAC/BE,GAAmBC,GAAiB,kBAAC,EAAD,CAAcD,gBAAiBA,EAAiBC,cAAeA,KAErGU,EAAmB,kBAAC,EAAD,CAAMtD,cAAeA,EACf8B,YAAawB,EACbhE,SAAU+D,EACVhD,cAAeI,KAAKL,MAAMC,cAC1Bc,iBAAkBV,KAAKL,MAAMe,iBAC7BX,cAAc,IACpB,kEAEtB,kBAAC,EAAD,CAAgB+B,gBAAiBA,EAAiBF,SAAUkB,S,GAjDpD1C,IAAMC,WCVlB0C,EAAqB,CACzBnD,cTuBK,SAA6BE,EAAeC,GAC/C,MAAM,CACFG,KAAMxB,EAAYsE,sBAClBC,QAAS,CACLnD,MAAOA,EACPC,aAAcA,KS3BxB+B,gBTgCK,WACH,MAAM,CACF5B,KAAMxB,EAAYwE,iBAClBD,QAAS,KSlCfjB,iBTsCK,WACH,MAAM,CACF9B,KAAMxB,EAAYyE,gBAClBF,QAAS,KSxCfvC,iBT4CK,SAAwBC,EAA8BZ,GACzD,MAAM,CACFG,KAAMxB,EAAY0E,gBAClBH,QAAS,CACLtC,qBAAsBA,EACtBZ,aAAcA,KShDxByC,kBTqDK,WACH,MAAM,CACFtC,KAAMxB,EAAY2E,oBAClBJ,QAAS,MSrDFK,eAjBS,SAAC1E,GAAD,MAAmB,CACvCS,aAAcD,EAAgBR,GAC9BC,SAAU,CACRI,QAASH,EAAmBF,GAC5BO,MAAOD,EAAiBN,IAE1BW,cAAeD,EAAiBV,MAWImE,EAAzBO,CAA6ChB,GCXxCiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCdAC,EAA6B,mCAStBC,EAAsB,CAC/BxE,aAAc,CACV,CAACmC,aAAc,MAAO1B,MAAO,KAC7B,CAAC0B,aAAc,MAAO1B,MAAO,GAC7B,CAAC0B,aAAc,MAAO1B,MAAO,GAC7B,CAAC0B,aAAc,MAAO1B,MAAO,GAC7B,CAAC0B,aAAc,MAAO1B,MAAO,IAEjCb,QAAS,CAAEuC,aAAc,MAAO1B,MAAO,GACvCX,MAAO,CAAEqC,aAAc,MAAO1B,MAAO,GACrCP,cAAe,CACX,CAACwB,KAAM,MAAOW,OAAQ,OAAKU,KAAM,IACjC,CAACrB,KAAM,MAAOW,OAAQ,SAAKU,KAAM,KACjC,CAACrB,KAAM,MAAOW,OAAQ,IAAKU,KAAM,GACjC,CAACrB,KAAM,MAAOW,OAAQ,MAAOU,KAAM,KACnC,CAACrB,KAAM,MAAOW,OAAQ,OAAKU,KAAM,QAyHzC,SAAS0B,EAAMhE,EAAeiE,GAC1B,GAAmB,qBAARA,GAAgC,KAARA,EACjC,OAAOC,KAAKF,MAAMhE,GAKpB,GAHAA,GAASA,EACTiE,GAAOA,EAEHE,MAAMnE,IAA2B,kBAARiE,GAAoBA,EAAM,IAAM,EAC3D,OAAOG,IAGT,IAAIC,EAAcrE,EAAMsE,WAAWC,MAAM,KAKzC,SADAF,GAHArE,EAAQkE,KAAKF,QAAQK,EAAY,GAAK,KAAOA,EAAY,IAAOA,EAAY,GAAKJ,EAAOA,MAGpEK,WAAWC,MAAM,MAChB,GAAK,KAAOF,EAAY,IAAOA,EAAY,GAAKJ,GAAQA,IC9J1E,IAAMF,EAAsB,CAC/BhF,SAAUA,GAGDyF,EAAUC,YAAuB,CAC1C1F,SDoBG,WAA8D,IAA7CD,EAA4C,uDAA7BiF,EAAcW,EAAe,uCAChE,OAAQA,EAAOtE,MAGX,KAAKxB,EAAYsE,sBACb,IAAIyB,EAAgBD,EAAOvB,QAAQnD,MAC/BC,EAAeyE,EAAOvB,QAAQlD,aAC9B2E,EAAW9F,EACXsD,EAAkBtD,EAAMW,cAAcgC,MAAK,SAACT,GAAU,OAAOA,EAAKC,OAASnC,EAAMK,QAAQuC,gBACzFW,EAAgBvD,EAAMW,cAAcgC,MAAK,SAACT,GAAU,OAAOA,EAAKC,OAASnC,EAAMO,MAAMqC,gBAYzF,OAVGU,GAAmBC,IACfpC,GACC2E,EAASzF,QAAQa,MAAQgE,EAAMW,EAAe,GAC9CC,EAASvF,MAAMW,MAAQgE,EAAMW,EAAgBvC,EAAgBE,KAAOD,EAAcC,KAAM,KAExFsC,EAASzF,QAAQa,MAAQgE,EAAMW,EAAgBtC,EAAcC,KAAOF,EAAgBE,KAAM,GAC1FsC,EAASvF,MAAMW,MAAQgE,EAAMW,EAAe,KAI7CE,OAAOC,OAAO,GAAIhG,EAAO8F,GAIpC,KAAKhG,EAAYwE,iBACb,IAAIwB,EAAW9F,EAiBf,OAfA8F,EAASrF,aAAeqF,EAASrF,aAAawB,KAAI,SAACC,GAC/C,IAAI+D,EAAU/D,EAQd,OAPGA,EAAKU,eAAiB5C,EAAMK,QAAQuC,aACnCqD,EAAQ/E,MAAQgE,EAAMhD,EAAKhB,MAAQlB,EAAMK,QAAQa,MAAO,GAClDgB,EAAKU,eAAiB5C,EAAMO,MAAMqC,eACxCqD,EAAQ/E,MAAQgE,EAAMhD,EAAKhB,MAAQlB,EAAMO,MAAMW,MAAO,IAInD+E,KAGXH,EAASvF,MAAMW,MAAQ,EACvB4E,EAASzF,QAAQa,MAAQ,EAElB6E,OAAOC,OAAO,GAAIhG,EAAO8F,GAIpC,KAAKhG,EAAYyE,gBACb,IAAIuB,EAAW9F,EACXkG,EAAalG,EAAMK,QACnB8F,EAAWnG,EAAMO,MAKrB,OAHAuF,EAASvF,MAAQ2F,EACjBJ,EAASzF,QAAU8F,EAEZJ,OAAOC,OAAO,GAAIhG,EAAO8F,GAIpC,KAAKhG,EAAY0E,gBACb,IAAIsB,EAAW9F,EACXoG,EAAmBpG,EAAMW,cAAcgC,MAAK,SAACT,GAAU,OAAOA,EAAKC,OAASyD,EAAOvB,QAAQtC,wBAE/F,GAAGqE,EACC,GAAGR,EAAOvB,QAAQlD,aAAa,CAC3B2E,EAASzF,QAAQuC,aAAewD,EAAiBjE,KACjD,IAAIoB,EAAgBvD,EAAMW,cAAcgC,MAAK,SAACT,GAAU,OAAOA,EAAKC,OAASnC,EAAMO,MAAMqC,gBACtFW,IACCuC,EAASvF,MAAMW,MAAQgE,EAAMY,EAASzF,QAAQa,MAAQkF,EAAiB5C,KAAOD,EAAcC,KAAM,QAErG,CACDsC,EAASvF,MAAMqC,aAAewD,EAAiBjE,KAC/C,IAAImB,EAAkBtD,EAAMW,cAAcgC,MAAK,SAACT,GAAU,OAAOA,EAAKC,OAASnC,EAAMK,QAAQuC,gBAC1FU,IACCwC,EAASzF,QAAQa,MAAQgE,EAAMY,EAASvF,MAAMW,MAAQkF,EAAiB5C,KAAOF,EAAgBE,KAAM,IAKhH,OAAOuC,OAAOC,OAAO,GAAIhG,EAAO8F,GAIpC,KAAKhG,EAAY2E,oBACb,IAAIqB,EAAW9F,EAwBf,OAtBAqG,MAAM,wDAAwDrB,GACzDsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,GAAGA,EAAIE,MACH,MAAMF,EAAIE,MAGd,IAAIC,EAAQH,EAAIG,MAChBZ,EAASnF,cAAcsB,KAAI,SAACC,GACxB,IAAI+D,EAAU/D,EACVU,EAAeqD,EAAQ9D,KAK3B,OAHGuE,EAAM9D,KACLqD,EAAQzC,KAAOkD,EAAM9D,IAElBqD,QAGdU,OAAM,SAAAF,GACH7E,QAAQC,IAAI4E,MAGbV,OAAOC,OAAO,GAAIhG,EAAO8F,GAGpC,QACI,OAAO9F,MEzIJ4G,EAFDC,YAAqCnB,EAAST,EAAc6B,YAAgBC,MCE1FC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAACM,EAAD,OAEFC,SAASC,eAAe,SJsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.4d614305.chunk.js","sourcesContent":["export enum ActionTypes{\n    CHANGE_EXCHANGE_VALUE = 'CHANGE_EXCHANGE_VALUE ',\n    CONFIRM_EXCHANGE = 'CONFIRM_EXCHANGE',\n    SWITCH_EXCHANGE = 'SWITCH_EXCHANGE',\n    SELECT_CURRENCY = 'SELECT_CURRENCY',\n    FETCH_EXCHANGE_RATE = 'FETCH_EXCHANGE_RATE'\n}\n\nexport interface InputValueChange {\n    type: ActionTypes.CHANGE_EXCHANGE_VALUE, \n    payload: { \n        value: number,\n        isSellingOut: boolean\n    }\n}\n\nexport interface ConfirmExchange {\n    type: ActionTypes.CONFIRM_EXCHANGE,\n    payload: {}\n}\n\nexport interface SwitchExchange {\n    type: ActionTypes.SWITCH_EXCHANGE,\n    payload: {}\n}\n\nexport interface SelectCurrency {\n    type: ActionTypes.SELECT_CURRENCY, \n    payload: { \n        selectedCurrencyCode: string,\n        isSellingOut: boolean\n    }\n}\n\nexport interface FetchExchangeRate {\n    type: ActionTypes.FETCH_EXCHANGE_RATE,\n    payload: {}\n}\n\nexport function changeExchangeValue(value: number, isSellingOut: boolean): InputValueChange{\n    return{\n        type: ActionTypes.CHANGE_EXCHANGE_VALUE,\n        payload: { \n            value: value,\n            isSellingOut: isSellingOut\n        }\n    }\n}\n\nexport function confirmExchange(){\n    return{\n        type: ActionTypes.CONFIRM_EXCHANGE,\n        payload: {}\n    }\n}\n\nexport function switchExchange(){\n    return{\n        type: ActionTypes.SWITCH_EXCHANGE,\n        payload: {}\n    }\n}\n\nexport function selectCurrency(selectedCurrencyCode: string, isSellingOut: boolean){\n    return{\n        type: ActionTypes.SELECT_CURRENCY,\n        payload: {\n            selectedCurrencyCode: selectedCurrencyCode,\n            isSellingOut: isSellingOut\n        }\n    }\n}\n\nexport function fetchExchangeRate(){\n    return{\n        type: ActionTypes.FETCH_EXCHANGE_RATE,\n        payload: {}\n    }\n}\n\nexport type Action = InputValueChange | ConfirmExchange | SwitchExchange | SelectCurrency | FetchExchangeRate","import { State } from '../reducers'\nimport { createSelector } from 'reselect'\n\nconst getExchangeState = ((state: State) => state.exchange)\n\nexport const getSellOutExchange = createSelector([getExchangeState], s => s.sellOut)\nexport const getBuyInExchange = createSelector([getExchangeState], s => s.buyIn)\nexport const getInitBalances = createSelector([getExchangeState], s => s.initBalances)\nexport const getAllCurrencies = createSelector([getExchangeState], s=> s.allCurrencies)\n","import React from 'react'\nimport Money from '../models/money'\n\ninterface ChangeExchangeValueFieldProps {\n    exchange: Money,\n    onInputChange: (value: number, isSellingOut: boolean) => void,\n    isSellingOut: boolean\n}\n\ninterface ChangeExchangeValueFieldState {}\n\nclass ChangeExchangeValueField extends React.Component<ChangeExchangeValueFieldProps, ChangeExchangeValueFieldState>{\n\n    handleChange = (e: any) => {\n        this.props.onInputChange(e.target.value, this.props.isSellingOut)\n    }\n\n    render() {\n        let {isSellingOut, exchange} = this.props\n        let inputValue = exchange.value\n\n        return (<div> \n            {inputValue > 0 && <span>{isSellingOut ? \"-\" : \"+\"}</span>}\n            <input type=\"text\" value={inputValue} onChange={(e: any) => this.handleChange(e)} />\n        </div>)\n    }\n    \n}\n\nexport default ChangeExchangeValueField","import React from 'react'\nimport Currency from '../models/currency'\nimport Select from 'react-select'\n\ninterface CurrencyListProps {\n    allCurrencies: Currency[],\n    onSelectCurrency: (selectedCurrencyCode: string, isSellingOut: boolean) => void,\n    selectedCurrencyCode: string,\n    isSellingOut: boolean\n}\n\ninterface CurrencyListState {}\n\nclass CurrencyList extends React.Component<CurrencyListProps, CurrencyListState>{\n\n    handleOnClick = (e: any) => {\n        console.log(e)\n        this.props.onSelectCurrency(e.value, this.props.isSellingOut)\n    }\n\n    render(){\n        let {allCurrencies, selectedCurrencyCode} = this.props\n        let allCurrenciesCodes = allCurrencies.map((item) => {return {value: item.code, label: item.code}})\n        let selectedCode = {value: selectedCurrencyCode, label: selectedCurrencyCode}\n\n        return <Select\n            classNamePrefix='currency-list'\n            value={selectedCode}\n            onChange={(e:any) => this.handleOnClick(e)}\n            options={allCurrenciesCodes}\n        />\n    }\n}\n\nexport default CurrencyList","import React from 'react';\nimport Money from '../models/money'\nimport Currency from '../models/currency'\nimport ChangeExchangeValueField from '../components/ChangeExchangeValueField'\nimport CurrencyList from '../components/CurrencyList'\n\ninterface AreaProps {\n    allCurrencies: Currency[],\n    initBalance: Money,\n    exchange: Money,\n    isSellingOut: boolean\n    onInputChange: (value: number, isSellingOut: boolean) => void\n    onSelectCurrency: (selectedCurrencyCode: string, isSellingOut: boolean) => void\n}\n\ninterface AreaState {}\n\nclass Area extends React.Component<AreaProps, AreaState>{\n    render() {\n        let { allCurrencies, initBalance,exchange, isSellingOut, onInputChange, onSelectCurrency } = this.props;\n        let currentCurrency = allCurrencies.find((item) => {return item.code === exchange.currencyCode})\n\n        return(\n            <div className={isSellingOut? \"area area--sellout\" : \"area area--buyin\"}>\n                <div className='area__pocket'>\n                    <CurrencyList allCurrencies={allCurrencies} \n                                    onSelectCurrency={onSelectCurrency} \n                                    selectedCurrencyCode={exchange.currencyCode}\n                                    isSellingOut={isSellingOut}/>\n                    <div className=\"area__balance\">Balance: {currentCurrency && currentCurrency.symbol}{initBalance.value}</div>\n                </div>\n                <div className='area__input'>\n                    <ChangeExchangeValueField isSellingOut={isSellingOut} exchange={exchange} onInputChange={onInputChange}/>\n                </div>\n            </div>\n        )\n    }\n}\n  \nexport default Area;","import React from 'react'\n\ninterface ExchangeButtonProps {\n    onClickExchange: () => void,\n    disabled: boolean\n}\n\nclass ExchangeButton extends React.Component<ExchangeButtonProps>{\n\n    render() {\n        let className = this.props.disabled? 'exchange-button primary-button disabled' : 'exchange-button primary-button'\n\n        return (<div className={className} onClick={this.props.onClickExchange}> \n            Exchange\n        </div>)\n    }\n    \n}\n\nexport default ExchangeButton","import React from 'react'\n\ninterface SwitchButtonProps {\n    onSwitchExchange: () => void\n}\n\nclass SwitchButton extends React.Component<SwitchButtonProps>{\n\n    render() {\n        return (<div className='switch-button' onClick={this.props.onSwitchExchange} />)\n    }\n}\n\nexport default SwitchButton","import React from 'react'\nimport Currency from '../models/currency'\n\ninterface ExchangeRateProps {\n    sellOutCurrency: Currency\n    buyInCurrency: Currency\n}\n\nclass ExchangeRate extends React.Component<ExchangeRateProps>{\n\n    render() {\n        let {sellOutCurrency, buyInCurrency} = this.props\n\n        return (<div className='exchange-rate'>\n            {sellOutCurrency && buyInCurrency &&\n                <div>1{sellOutCurrency.symbol} = {(1/sellOutCurrency.rate*buyInCurrency.rate).toFixed(4)}{buyInCurrency.symbol}</div>\n            }\n        </div>)\n    }\n}\n\nexport default ExchangeRate","import React from 'react';\nimport '../css/styles.css';\nimport Area from './Area';\nimport Money from '../models/money'\nimport Currency from '../models/currency';\nimport ExchangeButton from '../components/ExchangeButton'\nimport SwitchButton from '../components/SwitchButton'\nimport ExchangeRate from '../components/ExchangeRate'\n\ninterface AppProps {\n  initBalances: Money[]\n  exchange: {\n    sellOut: Money,\n    buyIn: Money\n  }\n  allCurrencies: Currency[]\n  onInputChange: (value: number, isSellingOut: boolean) => void\n  onClickExchange: () => void\n  onSwitchExchange: () => void\n  onSelectCurrency: (selectedCurrencyCode: string, isSellingOut: boolean) => void\n  fetchExchangeRate: () => void\n}\n\ninterface AppState {}\n\nclass App extends React.Component<AppProps, AppState>{\n  \n  timer = 0\n\n  componentDidMount() {\n    this.props.fetchExchangeRate()\n    // Send the API every 10 seconds to refresh the rates\n    // The line below was commented out due to the limitation of API calls per month\n    //this.timer = setInterval(() => this.props.fetchExchangeRate(), 10000);\n  }\n\n  componentWillUnmount() {\n      clearInterval(this.timer);\n      this.timer = 0;\n  }\n\n  render() {\n    let { initBalances, exchange, onClickExchange, onSwitchExchange, allCurrencies} = this.props\n    let sellOutExchange = exchange.sellOut\n    let sellOutInitBalance = initBalances.find((item) => {return item.currencyCode === sellOutExchange.currencyCode})\n    let buyInExchange = exchange.buyIn\n    let buyInInitBalance = initBalances.find((item) => {return item.currencyCode === buyInExchange.currencyCode})\n    let sellOutCurrency = allCurrencies.find((item) => {return item.code === sellOutExchange.currencyCode})\n    let buyInCurrency = allCurrencies.find((item) => {return item.code === buyInExchange.currencyCode})\n    let disableExchangeButton = sellOutInitBalance ? sellOutInitBalance.value < sellOutExchange.value || sellOutExchange.value === 0 || sellOutExchange.currencyCode === buyInExchange.currencyCode: true\n\n    return(\n      <div className='app'>\n        <div className='app__title'>Exchange</div>\n        <div className='area-container'>\n            {sellOutInitBalance ? <Area allCurrencies={allCurrencies}\n                                        initBalance={sellOutInitBalance} \n                                        exchange={sellOutExchange} \n                                        onInputChange={this.props.onInputChange} \n                                        onSelectCurrency={this.props.onSelectCurrency}\n                                        isSellingOut={true}/> \n                                :  <div>Sell Out Balance is not available.</div>}\n            <div className='area__middle'>\n              <SwitchButton onSwitchExchange={onSwitchExchange}/>\n              {sellOutCurrency && buyInCurrency && <ExchangeRate sellOutCurrency={sellOutCurrency} buyInCurrency={buyInCurrency}/>}\n            </div>\n            {buyInInitBalance ? <Area allCurrencies={allCurrencies}\n                                      initBalance={buyInInitBalance} \n                                      exchange={buyInExchange} \n                                      onInputChange={this.props.onInputChange} \n                                      onSelectCurrency={this.props.onSelectCurrency}\n                                      isSellingOut={false}/> \n                              : <div>Buy In Balance is not available.</div>}\n          </div>\n          <ExchangeButton onClickExchange={onClickExchange} disabled={disableExchangeButton}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux'\nimport { State } from '../reducers'\nimport { changeExchangeValue, confirmExchange, switchExchange, selectCurrency, fetchExchangeRate } from '../actions'\nimport { getInitBalances, getSellOutExchange, getBuyInExchange, getAllCurrencies } from '../selectors';\nimport App from '../components/App'\n\nconst mapStateToProps = (state: State) => ({\n    initBalances: getInitBalances(state),\n    exchange: {\n      sellOut: getSellOutExchange(state),\n      buyIn: getBuyInExchange(state)\n    },\n    allCurrencies: getAllCurrencies(state)\n  })\n\nconst mapDispatchToProps = {\n  onInputChange: changeExchangeValue,\n  onClickExchange: confirmExchange,\n  onSwitchExchange: switchExchange,\n  onSelectCurrency: selectCurrency,\n  fetchExchangeRate: fetchExchangeRate\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Money from '../models/money'\nimport { ActionTypes, Action } from '../actions'\nimport Currency from '../models/currency';\n\nconst OPEN_EXCHANGE_RATES_APP_ID = '144b758706f04d23817d346d321e63d7'\n\nexport interface State{\n    initBalances: Money[],\n    sellOut: Money,\n    buyIn: Money,\n    allCurrencies: Currency[]\n}\n\nexport const initialState: State = {\n    initBalances: [\n        {currencyCode: 'GBP', value: 100},\n        {currencyCode: 'EUR', value: 0},\n        {currencyCode: 'USD', value: 0},\n        {currencyCode: 'CHF', value: 0},\n        {currencyCode: 'CNY', value: 0}\n    ],\n    sellOut: { currencyCode: 'GBP', value: 0 },\n    buyIn: { currencyCode: 'EUR', value: 0 },\n    allCurrencies: [\n        {code: 'GBP', symbol: '£', rate: 0.8},\n        {code: 'EUR', symbol: '€', rate: 0.91},\n        {code: 'USD', symbol: '$', rate: 1},\n        {code: 'CHF', symbol: 'CHF', rate: 0.99},\n        {code: 'CNY', symbol: '¥', rate: 7.09}\n    ]\n}\n\nexport function reducer(state: State = initialState, action: Action){\n    switch (action.type){\n\n        // When new input value is received, update other value field\n        case ActionTypes.CHANGE_EXCHANGE_VALUE: {\n            let exchangeValue = action.payload.value\n            let isSellingOut = action.payload.isSellingOut\n            let newState = state\n            let sellOutCurrency = state.allCurrencies.find((item) => {return item.code === state.sellOut.currencyCode})\n            let buyInCurrency = state.allCurrencies.find((item) => {return item.code === state.buyIn.currencyCode})\n\n            if(sellOutCurrency && buyInCurrency){\n                if(isSellingOut){\n                    newState.sellOut.value = round(exchangeValue, 2)\n                    newState.buyIn.value = round(exchangeValue / sellOutCurrency.rate * buyInCurrency.rate, 2)\n                }else{\n                    newState.sellOut.value = round(exchangeValue / buyInCurrency.rate * sellOutCurrency.rate, 2)\n                    newState.buyIn.value = round(exchangeValue, 2)\n                }\n            }\n\n            return Object.assign({}, state, newState)\n        }\n\n        // Confirm an exchange\n        case ActionTypes.CONFIRM_EXCHANGE: {\n            let newState = state\n\n            newState.initBalances = newState.initBalances.map((item) => {\n                let newItem = item\n                if(item.currencyCode === state.sellOut.currencyCode){\n                    newItem.value = round(item.value - state.sellOut.value, 2)\n                }else if (item.currencyCode === state.buyIn.currencyCode){\n                    newItem.value = round(item.value + state.buyIn.value, 2)\n                }else{\n                    // do nothing\n                }\n                return newItem\n            })\n\n            newState.buyIn.value = 0\n            newState.sellOut.value = 0\n\n            return Object.assign({}, state, newState)\n        }\n\n        //Switch the exchanging pockets\n        case ActionTypes.SWITCH_EXCHANGE: {\n            let newState = state\n            let oldSellOut = state.sellOut\n            let oldBuyIn = state.buyIn\n\n            newState.buyIn = oldSellOut\n            newState.sellOut = oldBuyIn\n\n            return Object.assign({}, state, newState)\n        }\n\n        // Select a new currency\n        case ActionTypes.SELECT_CURRENCY: {\n            let newState = state\n            let selectedCurrency = state.allCurrencies.find((item) => {return item.code === action.payload.selectedCurrencyCode})\n\n            if(selectedCurrency){\n                if(action.payload.isSellingOut){\n                    newState.sellOut.currencyCode = selectedCurrency.code\n                    let buyInCurrency = state.allCurrencies.find((item) => {return item.code === state.buyIn.currencyCode})\n                    if(buyInCurrency){\n                        newState.buyIn.value = round(newState.sellOut.value / selectedCurrency.rate * buyInCurrency.rate, 2)\n                    }\n                }else{\n                    newState.buyIn.currencyCode = selectedCurrency.code\n                    let sellOutCurrency = state.allCurrencies.find((item) => {return item.code === state.sellOut.currencyCode})\n                    if(sellOutCurrency){\n                        newState.sellOut.value = round(newState.buyIn.value / selectedCurrency.rate * sellOutCurrency.rate, 2)\n                    }\n                }\n            }\n            \n            return Object.assign({}, state, newState)\n        }\n\n        // Send the API call to get updated exchange rate\n        case ActionTypes.FETCH_EXCHANGE_RATE:{\n            let newState = state\n\n            fetch('https://openexchangerates.org/api/latest.json?app_id='+OPEN_EXCHANGE_RATES_APP_ID)\n                .then(res => res.json())\n                .then(res => {\n                    if(res.error) {\n                        throw(res.error);\n                    }\n                    // console.log(res)\n                    let rates = res.rates\n                    newState.allCurrencies.map((item) => {\n                        let newItem = item\n                        let currencyCode = newItem.code\n                        \n                        if(rates[currencyCode]){\n                            newItem.rate = rates[currencyCode]\n                        }\n                        return newItem\n                    })\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n\n            return Object.assign({}, state, newState)\n        }\n\n        default:\n            return state\n    }\n}\n\n// round the number with decimals\nfunction round(value: number, exp: number) {\n    if (typeof exp === 'undefined' || +exp === 0)\n      return Math.round(value);\n  \n    value = +value;\n    exp = +exp;\n  \n    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0))\n      return NaN;\n  \n    // Shift\n    var valueString = value.toString().split('e');\n    value = Math.round(+(valueString[0] + 'e' + (valueString[1] ? (+valueString[1] + exp) : exp)));\n  \n    // Shift back\n    valueString = value.toString().split('e');\n    return +(valueString[0] + 'e' + (valueString[1] ? (+valueString[1] - exp) : -exp));\n}","import { combineReducers } from 'redux'\nimport * as exchange from './exchange'\n\nexport interface State {\n    exchange: exchange.State\n}\n\nexport const initialState: State = {\n    exchange: exchange.initialState\n}\n\nexport const reducer = combineReducers<State>({\n    exchange: exchange.reducer\n})","import logger from 'redux-logger'\nimport { createStore, applyMiddleware } from 'redux'\nimport { State, reducer, initialState } from '../reducers'\nimport { Action } from '../actions'\n\nconst store = createStore<State, Action, any, any>(reducer, initialState, applyMiddleware(logger))\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './containers/AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}